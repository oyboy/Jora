services:
  jora:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 8081:8081
    env_file:
      - .env
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://jora-mysql-db:3306/joradb?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: ${DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DATASOURCE_PASSWORD}
      API_REDIS_HOST: jora-redis-db
      SPRING_PROFILES_ACTIVE: prod
      SPRING_KAFKA_BOOTSTRAP_SERVERS: 172.17.0.1:9092
    depends_on:
      - mysql
      - mongo
      - redis

  mysql:
    image: mysql:8.0
    container_name: jora-mysql-db
    restart: always
    environment:
      MYSQL_DATABASE: joradb
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql_data:/home/mysql

  mongo:
    image: mongo:latest
    container_name: jora-mongo-db
    restart: always
    volumes:
      - mongo_data:/home/data/db

  redis:
    image: redis:alpine
    container_name: jora-redis-db
    restart: always
    volumes:
      - ./redisdata:/data

  #zookeeper: { image: confluentinc/cp-zookeeper:latest, environment: { ZOOKEEPER_CLIENT_PORT: 2181, ZOOKEEPER_TICK_TIME: 2000 }, ports: [ 2181:2181 ] }

  #kafka: { image: confluentinc/cp-kafka:latest, depends_on: [ zookeeper ], ports: [ 9094:9094 ], environment: { KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181, KAFKA_LISTENERS: "INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9094", KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:9092,OUTSIDE://localhost:9094", KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT", KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL } }

volumes:
  mongo_data:
  mysql_data: